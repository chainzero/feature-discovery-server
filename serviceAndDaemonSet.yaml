apiVersion: v1
kind: ServiceAccount
metadata:
  name: hostfeaturediscovery-sa
  namespace: akash-services

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: hostfeaturediscovery-role
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: hostfeaturediscovery-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hostfeaturediscovery-role
subjects:
- kind: ServiceAccount
  name: hostfeaturediscovery-sa
  namespace: akash-services

---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: hostfeaturediscovery
  namespace: akash-services
  labels:
    app: hostfeaturediscovery
spec:
  selector:
    matchLabels:
      app: hostfeaturediscovery
  template:
    metadata:
      labels:
        app: hostfeaturediscovery
    spec:
      serviceAccountName: hostfeaturediscovery-sa
      containers:
      - name: hostfeaturediscovery
        image: scarruthers/hostfeaturediscovery:v71
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 50051
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName